package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"context"
	"fmt"
	"strconv"

	"github.com/RoongJin/pokedex-graphql-sqlite/graph/model"
)

// AddPokemon is the resolver for the addPokemon field.
func (r *mutationResolver) AddPokemon(ctx context.Context, input model.NewPokemon) (*model.Pokemon, error) {
	if input.ID != nil {
		return nil, fmt.Errorf("ID of a new Pokemon must be null!")
	}

	var id int64
	id = AddPokemon(r.DB.DBPointer, input.Name, input.Description, input.Category, input.Type, input.Abilities)
	poke, err := FindPokemonById(r.DB.DBPointer, id)

	return &poke, err
}

// UpdatePokemon is the resolver for the updatePokemon field.
func (r *mutationResolver) UpdatePokemon(ctx context.Context, input model.NewPokemon) (*model.Pokemon, error) {
	if input.ID == nil {
		return nil, fmt.Errorf("cannot modify a Pokemon without specify its ID")
	}
	id_int64, err := strconv.ParseInt(*input.ID, 10, 64)
	checkErr(err)

	_, err = FindPokemonById(r.DB.DBPointer, id_int64)
	checkErr(err)

	UpdatePokemon(r.DB.DBPointer, int(id_int64), input.Name, input.Description, input.Category, input.Type, input.Abilities)
	poke, err := FindPokemonById(r.DB.DBPointer, id_int64)
	checkErr(err)

	return &poke, nil
}

// DeletePokemon is the resolver for the deletePokemon field.
func (r *mutationResolver) DeletePokemon(ctx context.Context, input model.IDToModify) (bool, error) {
	fmt.Println(input.ID)
	if input.ID == "" {
		return false, fmt.Errorf("cannot modify a Pokemon without specify its ID")
	}
	id_int64, err := strconv.ParseInt(input.ID, 10, 64)
	checkErr(err)
	fmt.Println(id_int64)

	_, err = FindPokemonById(r.DB.DBPointer, id_int64)
	if err != nil {
		return false, fmt.Errorf("Cannot delete as it does not exist!")
	}

	DeletePokemon(r.DB.DBPointer, int(id_int64))

	return true, nil
}

// Pokemon is the resolver for the pokemon field.
func (r *queryResolver) Pokemon(ctx context.Context, id string) (*model.Pokemon, error) {
	id_int64, err := strconv.ParseInt(id, 10, 64)
	checkErr(err)

	poke, err := FindPokemonById(r.DB.DBPointer, id_int64)
	checkErr(err)

	return &poke, nil
}

// Pokemons is the resolver for the Pokemons field.
func (r *queryResolver) Pokemons(ctx context.Context) ([]*model.Pokemon, error) {
	pokeList, err := GetAllPokemons(r.DB.DBPointer)
	if err != nil {
		return nil, err
	}

	return pokeList, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
